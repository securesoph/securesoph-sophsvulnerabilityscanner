import socket
import time
import sys

def loading_animation():
    animation = "|/-\\"
    for i in range(10):
        time.sleep(0.1)
        sys.stdout.write("\rScanning for vulnerabilities " + animation[i % len(animation)])
        sys.stdout.flush()

def get_banner(target_ip, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        s.connect((target_ip, port))
        banner = s.recv(1024).decode().strip()
        s.close()
        return banner
    except Exception as e:
        print(f"Error retrieving banner for port {port}: {e}")
        return "N/A"

def check_vulnerabilities(banner):
    if "Apache" in banner:
        if "2.4.49" in banner:
            return "Vulnerability detected: CVE-2021-41773 - Apache HTTP Server Path Traversal Vulnerability"
        elif "2.4.48" in banner:
            return "Vulnerability detected: CVE-2021-40346 - Apache HTTP Server Vulnerable to Remote Code Execution"
        else:
            return "Potential vulnerability: Apache version detected"
    elif "Microsoft-IIS" in banner:
        if "10.0" in banner:
            return "Vulnerability detected: CVE-2021-31166 - HTTP Protocol Stack Remote Code Execution Vulnerability"
        else:
            return "Potential vulnerability: Microsoft IIS version detected"
    elif "OpenSSH" in banner:
        if "7.9" in banner:
            return "Vulnerability detected: CVE-2019-6111 - OpenSSH User Enumeration Vulnerability"
        else:
            return "Potential vulnerability: OpenSSH version detected"
    else:
        return "No known vulnerabilities detected for the detected banner"

def port_scan(target_ip, start_port, end_port):
    open_ports = []
    try:
        print("Starting vulnerability scan...\n")
        for port in range(start_port, end_port + 1):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            result = s.connect_ex((target_ip, port))
            if result == 0:
                open_ports.append(port)
                banner = get_banner(target_ip, port)
                vulnerability = check_vulnerabilities(banner)
                print(f"Port {port} is open - Banner: {banner}")
                print(f"Vulnerability: {vulnerability}\n")
            s.close()
            loading_animation()  # Display loading animation
        print("Vulnerability scan completed.")
        return open_ports
    except Exception as e:
        print(f"Error during port scanning: {e}")
        return []

# Example usage
target_ip = "127.0.0.1"  # Replace with the IP address you want to scan
start_port = 1
end_port = 1024

open_ports = port_scan(target_ip, start_port, end_port)
